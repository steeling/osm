apiVersion: apps/v1
kind: Deployment
metadata:
  name: osm-webhook
  namespace: {{ include "osm.namespace" . }}
  labels:
    {{- include "osm.labels" . | nindent 4 }}
    app: osm-webhook
    meshName: {{ .Values.OpenServiceMesh.meshName }}
spec:
  replicas: {{ .Values.OpenServiceMesh.osmwebhook.replicaCount }}
  selector:
    matchLabels:
      app: osm-webhook
  template:
    metadata:
      labels:
        {{- include "osm.labels" . | nindent 8 }}
        app: osm-webhook
  {{- if .Values.OpenServiceMesh.osmwebhook.podLabels }}
  {{- toYaml .Values.OpenServiceMesh.osmwebhook.podLabels | nindent 8 }}
  {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "{{ .Values.OpenServiceMesh.osmwebhook.port }}"
        openservicemesh.io/sidecar-injection: 'disabled'
    spec:
      serviceAccountName: {{ .Release.Name }}
      {{- if and (not (.Capabilities.APIVersions.Has "security.openshift.io/v1")) .Values.OpenServiceMesh.pspEnabled }}
      {{- include "restricted.securityContext" . | nindent 6 }}
      {{- end }}
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      containers:
        - name: osm-webhook
          image: "{{ .Values.OpenServiceMesh.image.registry }}/osm-webhook:{{ .Values.OpenServiceMesh.image.tag }}"
          imagePullPolicy: {{ .Values.OpenServiceMesh.image.pullPolicy }}
          ports:
            - name: "osm-webhook"
              containerPort: {{ .Values.OpenServiceMesh.osmwebhook.port }}
          command: ['/osm-webhook']
          args: [
            "--port", "{{ .Values.OpenServiceMesh.osmwebhook.port }}",
            "--ca-bundle-secret-name", "{{.Values.OpenServiceMesh.caBundleSecretName}}",
            "--certificate-manager", "{{.Values.OpenServiceMesh.certificateManager}}",
            {{ if eq .Values.OpenServiceMesh.certificateManager "vault" }}
            "--vault-host", "{{.Values.OpenServiceMesh.vault.host}}",
            "--vault-protocol", "{{.Values.OpenServiceMesh.vault.protocol}}",
            "--vault-token", "{{.Values.OpenServiceMesh.vault.token}}",
            {{- end }}
            "--cert-manager-issuer-name", "{{.Values.OpenServiceMesh.certmanager.issuerName}}",
            "--cert-manager-issuer-kind", "{{.Values.OpenServiceMesh.certmanager.issuerKind}}",
            "--cert-manager-issuer-group", "{{.Values.OpenServiceMesh.certmanager.issuerGroup}}",
            "--osm-namespace", '{{ include "osm.namespace" . }}',
            ]
          env:
            # The WEBHOOK_POD_NAME env variable sets pod name dynamically, used by osm-injector to register events
            - name: WEBHOOK_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            limits:
              cpu: "{{.Values.OpenServiceMesh.osmwebhook.resource.limits.cpu}}"
              memory: "{{.Values.OpenServiceMesh.osmwebhook.resource.limits.memory}}"
            requests:
              cpu: "{{.Values.OpenServiceMesh.osmwebhook.resource.requests.cpu}}"
              memory: "{{.Values.OpenServiceMesh.osmwebhook.resource.requests.memory}}"
          readinessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTPS
              path: /health/ready
              port: {{ .Values.OpenServiceMesh.osmwebhook.port }}
          livenessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet: 
              scheme: HTTPS
              path: /health/alive
              port: {{ .Values.OpenServiceMesh.osmwebhook.port }}

    {{- if .Values.OpenServiceMesh.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.OpenServiceMesh.imagePullSecrets | indent 8 }}
    {{- end }}
